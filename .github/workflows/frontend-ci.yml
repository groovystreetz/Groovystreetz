# Name of the workflow, which will appear in the "Actions" tab of your GitHub repo
name: Frontend Pull Request Check

# This section defines the trigger for the workflow.
on:
  # Run this workflow when a pull request is created or updated
  pull_request:
    # Only run for pull requests that target the 'main' branch
    branches:
      - main
    # Only consider files within the 'frontend' directory
    paths:
      - 'frontend/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Job 1: Detect all projects in the frontend directory
  detect-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.find-projects.outputs.projects }}
      has-projects: ${{ steps.find-projects.outputs.has-projects }}
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changed files detection
      
      # Step 2: Find all projects with package.json files
      - name: Find Frontend Projects
        id: find-projects
        run: |
          # Find all package.json files in frontend subdirectories (not the root frontend)
          projects=$(find frontend -name "package.json" -not -path "frontend/package.json" | sed 's|/package.json||' | sort)
          
          # If no projects found in subdirectories, check if there's a root frontend project
          if [ -z "$projects" ] && [ -f "frontend/package.json" ]; then
            projects="frontend"
          fi
          
          if [ -n "$projects" ]; then
            # Convert to JSON array format for matrix strategy
            json_projects=$(echo "$projects" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "projects=$json_projects" >> $GITHUB_OUTPUT
            echo "has-projects=true" >> $GITHUB_OUTPUT
            echo "Found projects:"
            echo "$projects"
          else
            echo "projects=[]" >> $GITHUB_OUTPUT
            echo "has-projects=false" >> $GITHUB_OUTPUT
            echo "No frontend projects found"
          fi

  # Job 2: Build and test each detected project
  build-and-test:
    needs: detect-projects
    # Only run if we found projects
    if: needs.detect-projects.outputs.has-projects == 'true'
    runs-on: ubuntu-latest
    strategy:
      # Run jobs in parallel for each project
      matrix:
        project: ${{ fromJson(needs.detect-projects.outputs.projects) }}
      # Don't cancel other jobs if one fails
      fail-fast: false
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changed files detection
      
      # Step 2: Check if this specific project has changes
      - name: Check for Changes in Project
        id: changes
        run: |
          # Get the list of changed files using a more reliable method
          # Use the merge base to find the common ancestor
          if git rev-parse --verify refs/remotes/origin/${{ github.base_ref }} >/dev/null 2>&1; then
            # If origin/base_ref exists, use it
            changed_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          elif git rev-parse --verify ${{ github.base_ref }} >/dev/null 2>&1; then
            # If base_ref exists locally, use it
            changed_files=$(git diff --name-only ${{ github.base_ref }}..HEAD)
          else
            # Fallback: compare with the merge base of HEAD and origin/main
            git fetch origin ${{ github.base_ref }} || git fetch origin main || true
            merge_base=$(git merge-base HEAD origin/${{ github.base_ref }} 2>/dev/null || git merge-base HEAD origin/main 2>/dev/null || echo "HEAD~1")
            changed_files=$(git diff --name-only ${merge_base}..HEAD)
          fi
          
          # Check if any changed files are in this project directory
          if echo "$changed_files" | grep -q "^${{ matrix.project }}/"; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in ${{ matrix.project }}"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in ${{ matrix.project }}"
          fi
      
      # Step 3: Setup Node.js (only if there are changes)
      - name: Setup Node.js LTS
        if: steps.changes.outputs.has-changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json
      
      # Step 4: Install dependencies
      - name: Install Dependencies
        if: steps.changes.outputs.has-changes == 'true'
        working-directory: ./${{ matrix.project }}
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          elif [ -f "pnpm-lock.yaml" ]; then
            npm install -g pnpm
            pnpm install --frozen-lockfile
          else
            npm install
          fi
      
      # Step 5: Run linter
      - name: Lint Code
        if: steps.changes.outputs.has-changes == 'true'
        working-directory: ./${{ matrix.project }}
        run: |
          # Check if lint script exists before running
          if npm run | grep -q "lint"; then
            npm run lint
          else
            echo "No lint script found, skipping..."
          fi
      
      # Step 6: Run tests
      - name: Run Tests
        if: steps.changes.outputs.has-changes == 'true'
        working-directory: ./${{ matrix.project }}
        run: |
          # Check if test script exists before running
          if npm run | grep -q "test"; then
            npm run test
          else
            echo "No test script found, skipping..."
          fi
      
      # Step 7: Build the project
      - name: Build Production App
        if: steps.changes.outputs.has-changes == 'true'
        working-directory: ./${{ matrix.project }}
        run: |
          # Check if build script exists before running
          if npm run | grep -q "build"; then
            npm run build
          else
            echo "No build script found, skipping..."
          fi
      
      # Step 8: Skip message for unchanged projects
      - name: Skip Unchanged Project
        if: steps.changes.outputs.has-changes == 'false'
        run: |
          echo "⏭️ Skipping ${{ matrix.project }} - no changes detected"

  # Job 3: Summary job that depends on all builds
  summary:
    needs: [detect-projects, build-and-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Results
        run: |
          if [ "${{ needs.detect-projects.outputs.has-projects }}" == "false" ]; then
            echo "✅ No frontend projects found to build"
          elif [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "✅ All frontend projects built successfully"
          elif [ "${{ needs.build-and-test.result }}" == "skipped" ]; then
            echo "⏭️ All frontend projects were skipped (no changes)"
          else
            echo "❌ Some frontend projects failed to build"
            exit 1
          fi
